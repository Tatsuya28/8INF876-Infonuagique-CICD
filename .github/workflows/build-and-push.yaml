name: Build Docker container and push to DO registry

on:
  # workflow_call:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CLUSTER_NAME: k8s-django-cicd
  REGISTRY_DOMAIN: registry.digitalocean.com
  REGISTRY_NAME: uqac-8inf876
  IMAGE_NAME: django-cicd-src
  SECRET_NAME: django-cicd-k8s-src-prod-env
  DEPLOYMENT_NAME: django-cicd-src-deployment
  SRC_DIR: src
  DOCKERFILE: Dockerfile
  PROD_ENV: .env.prod

jobs:
  test_django_mysql_job: 
    uses: Tatsuya28/8INF876-Infonuagique-CICD/.github/workflows/test-django.yaml@main

  build:
    runs-on: ubuntu-latest
    needs: [ test_django_mysql_job ]

    # outputs:
    #   SHORT_SHA: ${{ steps.get-short-sha.outputs.SHORT_SHA }}
    
    steps:
    - name: Clone repository code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Login to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 1200

    - name: Get short SHA and save it for pushing image
      id: get-short-sha
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV
      # echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_OUTPUT

    - name: Build container image
      working-directory: ${{ env.SRC_DIR }}
      run: |
        docker build -f ${{ env.DOCKERFILE }} \
          -t ${{ env.REGISTRY_DOMAIN }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest \
          -t ${{ env.REGISTRY_DOMAIN }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }} \
          .

  #   - name: Save Docker image as an artifact
  #     run: |
  #       docker save ${{ env.REGISTRY_DOMAIN }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest | gzip > image.tar.gz

  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: docker-image
  #       path: image.tar.gz

  # push:
  #   runs-on: ubuntu-latest
  #   needs: [ build ]
    
  #   steps:
  #   - name: Clone repository code
  #     uses: actions/checkout@v4

  #   - name: Download artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: docker-image
    
  #   - name: Load Docker image
  #     run: gunzip < image.tar.gz | docker load

  #   - name: Install doctl
  #     uses: digitalocean/action-doctl@v2
  #     with:
  #       token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
  #   - name: Login to DigitalOcean Container Registry with short-lived credentials
  #     run: doctl registry login --expiry-seconds 600
    
    - name: Push container image to DO registry
      run: |
        docker push ${{ env.REGISTRY_DOMAIN }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }} --all-tags

    - name: Set up kubectl with DigitalOcean Kubernetes cluster config file with short-lived credentials
      run: |
        doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER_NAME }}

    - name: Update deployment secrets
      run: |
        cat << EOF >> ${{ env.SRC_DIR }}/${{ env.PROD_ENV }}
        DEBUG=1
        DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}
        DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
        DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}
        DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}

        ENV_ALLOWED_HOSTS=${{ secrets.ENV_ALLOWED_HOSTS }}

        MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_USER=${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
        MYSQL_HOST=${{ secrets.MYSQL_HOST }}
        MYSQL_PORT=${{ secrets.MYSQL_PORT }}
        MYSQL_DB=${{ secrets.MYSQL_DB }}
        EOF

        kubectl delete secret ${{ env.SECRET_NAME }}
        kubectl create secret generic ${{ env.SECRET_NAME }} --from-env-file=${{ env.SRC_DIR }}/${{ env.PROD_ENV }}

    - name: Update Kubernetes deployment with new image
      run: |
        kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
          django-cicd-src=${{ env.REGISTRY_DOMAIN }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}: ${{ env.SHORT_SHA }}
      # ${{ needs.build.outputs.SHORT_SHA }}

    - name: Wait for deployment rollout to finish
      run: |
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} 

    - name: Migrate database command
      run: |
        export SINGLE_POD_NAME=$(kubectl get pods -l app=${{ env.DEPLOYMENT_NAME }} -o jsonpath="{.items[0].metadata.name}")
        kubectl exec $SINGLE_POD_NAME -- bash /app/migrate.sh